// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMS_Data.DataContext;

#nullable disable

namespace SMS_Data.Migrations
{
    [DbContext(typeof(DataContextDB))]
    [Migration("20230702085951_All_Table_column_drop")]
    partial class All_Table_column_drop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SMS_Data.Models.Class", b =>
                {
                    b.Property<long?>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("ClassId"));

                    b.Property<string>("ClassCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("class_code");

                    b.Property<string>("ClassName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("class_name");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<long?>("StaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("staff_id");

                    b.Property<int?>("TotalSection")
                        .HasColumnType("int")
                        .HasColumnName("total_section");

                    b.Property<int?>("TotalSpaceLeft")
                        .HasColumnType("int")
                        .HasColumnName("total_space_left");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("ClassId");

                    b.HasIndex("StaffId");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("SMS_Data.Models.Mark", b =>
                {
                    b.Property<long?>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mark_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("MarkId"));

                    b.Property<long?>("CheckId")
                        .HasColumnType("bigint")
                        .HasColumnName("check_id");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double?>("ObtainedMarks")
                        .HasColumnType("float")
                        .HasColumnName("obtain_marks");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<long?>("StudenId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("MarkId");

                    b.HasIndex("CheckId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudenId");

                    b.HasIndex("SubjectId");

                    b.ToTable("marks", (string)null);
                });

            modelBuilder.Entity("SMS_Data.Models.Salary", b =>
                {
                    b.Property<long?>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("salary_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("SalaryId"));

                    b.Property<double?>("AmountPaid")
                        .HasColumnType("float")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double?>("PFAmount")
                        .HasColumnType("float")
                        .HasColumnName("pf_amount");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float")
                        .HasColumnName("tax_amount");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type_name");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("SalaryId");

                    b.ToTable("salaries", (string)null);
                });

            modelBuilder.Entity("SMS_Data.Models.Staff", b =>
                {
                    b.Property<long?>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("StaffId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("address");

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("employee_type");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("gender");

                    b.Property<bool>("HasMadicleCondition")
                        .HasColumnType("bit")
                        .HasColumnName("has_medical_condition");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("joined_date");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("mobile");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("pincode");

                    b.Property<string>("PreviousExperience")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("previous_experience");

                    b.Property<byte[]>("ProfilePictureData")
                        .IsRequired()
                        .HasColumnType("varbinary(MAX)")
                        .HasColumnName("ProfilePicture");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("qualification");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("release_date");

                    b.Property<string>("Religion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("religion");

                    b.Property<long?>("SalaryId")
                        .HasColumnType("bigint")
                        .HasColumnName("salary_id");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("staff_name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state");

                    b.Property<string>("SubjectSpeciality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("subject_speciality");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("StaffId");

                    b.HasIndex("SalaryId");

                    b.ToTable("staffs", (string)null);
                });

            modelBuilder.Entity("SMS_Data.Models.Student", b =>
                {
                    b.Property<long?>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("StudentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("admission_date");

                    b.Property<int?>("Age")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<bool?>("AttendSchoolBefore")
                        .HasColumnType("bit")
                        .HasColumnName("attend_school_before");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("gender");

                    b.Property<string>("GuardianName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("guardian_name");

                    b.Property<bool?>("HasMadicleCondition")
                        .HasColumnType("bit")
                        .HasColumnName("has_medical_condition");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastAttendense")
                        .HasColumnType("datetime")
                        .HasColumnName("last_attendence_date");

                    b.Property<string>("Mobile")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("mobile");

                    b.Property<int?>("NumberOfAttendances")
                        .HasColumnType("int")
                        .HasColumnName("number_of_attendences");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("pincode");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("profile_photo");

                    b.Property<string>("RelationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("relation_type");

                    b.Property<string>("Religion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("religion");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state");

                    b.Property<string>("StudentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("student_name");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("SMS_Data.Models.Subject", b =>
                {
                    b.Property<long?>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("SubjectId"));

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("subject_code");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subject_name");

                    b.Property<string>("SubjectType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("subject_type");

                    b.Property<int?>("TotalMarks")
                        .HasColumnType("int")
                        .HasColumnName("total_marks");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("SubjectId");

                    b.HasIndex("ClassId");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("SMS_Data.Models.Class", b =>
                {
                    b.HasOne("SMS_Data.Models.Staff", "stafftable")
                        .WithMany("classtable")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_classes_staffs");

                    b.Navigation("stafftable");
                });

            modelBuilder.Entity("SMS_Data.Models.Mark", b =>
                {
                    b.HasOne("SMS_Data.Models.Staff", "stafftable")
                        .WithMany("marktable")
                        .HasForeignKey("CheckId")
                        .HasConstraintName("FK_marks_staffs");

                    b.HasOne("SMS_Data.Models.Class", "classtable")
                        .WithMany("marktable")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_marks_classes");

                    b.HasOne("SMS_Data.Models.Student", "studenttable")
                        .WithMany("marktable")
                        .HasForeignKey("StudenId")
                        .HasConstraintName("FK_marks_students");

                    b.HasOne("SMS_Data.Models.Subject", "subjecttable")
                        .WithMany("marktable")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_marks_subjects");

                    b.Navigation("classtable");

                    b.Navigation("stafftable");

                    b.Navigation("studenttable");

                    b.Navigation("subjecttable");
                });

            modelBuilder.Entity("SMS_Data.Models.Staff", b =>
                {
                    b.HasOne("SMS_Data.Models.Salary", "salarytable")
                        .WithMany("stafftable")
                        .HasForeignKey("SalaryId")
                        .HasConstraintName("FK_staffs_salaries");

                    b.Navigation("salarytable");
                });

            modelBuilder.Entity("SMS_Data.Models.Student", b =>
                {
                    b.HasOne("SMS_Data.Models.Class", "ClassTable")
                        .WithMany("studenttable")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_students_classes");

                    b.Navigation("ClassTable");
                });

            modelBuilder.Entity("SMS_Data.Models.Subject", b =>
                {
                    b.HasOne("SMS_Data.Models.Class", "classtable")
                        .WithMany("subjecttable")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_subjects_classes");

                    b.Navigation("classtable");
                });

            modelBuilder.Entity("SMS_Data.Models.Class", b =>
                {
                    b.Navigation("marktable");

                    b.Navigation("studenttable");

                    b.Navigation("subjecttable");
                });

            modelBuilder.Entity("SMS_Data.Models.Salary", b =>
                {
                    b.Navigation("stafftable");
                });

            modelBuilder.Entity("SMS_Data.Models.Staff", b =>
                {
                    b.Navigation("classtable");

                    b.Navigation("marktable");
                });

            modelBuilder.Entity("SMS_Data.Models.Student", b =>
                {
                    b.Navigation("marktable");
                });

            modelBuilder.Entity("SMS_Data.Models.Subject", b =>
                {
                    b.Navigation("marktable");
                });
#pragma warning restore 612, 618
        }
    }
}
